#!/bin/bash

# Export XAUTHORITY and DISPLAY for the current user
getXuser() {
  user=`pinky| grep -m1 ":$displaynum" | awk '{print $1}'`
 
  if [ x"$user" != x"" ]; then
    userhome=`getent passwd $user | cut -d: -f6`
    export XAUTHORITY="$userhome/.Xauthority"
  else
    export XAUTHORITY=""
  fi
}

for x in /tmp/.X11-unix/*; do
  displaynum=`echo $x | sed s#/tmp/.X11-unix/X##`
  getXuser
  if [ x"$XAUTHORITY" != x"" ]; then
    # extract current state
    export DISPLAY=":$displaynum"
  fi
done

set -x

# Force prime-offload execution, which is required for optimus-manager to work
if [ $(which prime-offload) ]; then
  prime-offload
fi

MONITORS=$(xrandr -q | grep '.* connected' | awk '{ print $1 }')
N_MONITORS=$(echo "$MONITORS" | wc -l)

# Built-in monitor
EDP_MONITOR=$(echo "$MONITORS" | grep '^eDP')
EDP_MONITOR=${EDP_MONITOR:-unknown}

# External monitor (left, portrait) connected to the DisplayPort output
DP_MONITOR=$(echo "$MONITORS" | grep '^DP')
DP_MONITOR=${DP_MONITOR:-unknown}

# External monitor (right) connected to the HDMI output
HDMI_MONITOR=$(echo "$MONITORS" | grep '^HDMI')
HDMI_MONITOR=${HDMI_MONITOR:-unknown}

# Extra xrandr parameters for each monitor
EDP_ARGS=''
DP_ARGS=''
HDMI_ARGS=''

# Set primary monitor giving priority to the external displays
if [ $HDMI_MONITOR != 'unknown' ]; then
  xrandr --output $HDMI_MONITOR --primary
elif [ $DP_MONITOR != 'unknown' ]; then
  xrandr --output $DP_MONITOR --primary
else
  xrandr --output $EDP_MONITOR --primary
fi

# Disable built-in displays if two external displays are connected
if [ $HDMI_MONITOR != 'unknown' ] && [ $DP_MONITOR != 'unknown' ]; then
  xrandr --output $EDP_MONITOR --off
else
  xrandr --output $EDP_MONITOR --auto $EDP_ARGS
fi

xrandr --output $DP_MONITOR $DP_ARGS --right-of $EDP_MONITOR \
       --output $HDMI_MONITOR $HDMI_ARGS --right-of $DP_MONITOR
